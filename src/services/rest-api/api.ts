/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface DocumentsReq
 */
export interface DocumentsReq {
    /**
     * 
     * @type {ObjectId}
     * @memberof DocumentsReq
     */
    _id?: ObjectId;
    /**
     * 
     * @type {string}
     * @memberof DocumentsReq
     */
    date?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentsReq
     */
    docType?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentsReq
     */
    file?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentsReq
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentsReq
     */
    subject?: string;
}
/**
 * 
 * @export
 * @interface DocumentsRes
 */
export interface DocumentsRes {
    /**
     * 
     * @type {string}
     * @memberof DocumentsRes
     */
    _id?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentsRes
     */
    date?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentsRes
     */
    docType?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentsRes
     */
    file?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentsRes
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentsRes
     */
    subject?: string;
}
/**
 * 
 * @export
 * @interface MessagesReq
 */
export interface MessagesReq {
    /**
     * 
     * @type {ObjectId}
     * @memberof MessagesReq
     */
    _id?: ObjectId;
    /**
     * 
     * @type {string}
     * @memberof MessagesReq
     */
    recipient?: string;
    /**
     * 
     * @type {string}
     * @memberof MessagesReq
     */
    sms?: string;
}
/**
 * 
 * @export
 * @interface MessagesRes
 */
export interface MessagesRes {
    /**
     * 
     * @type {string}
     * @memberof MessagesRes
     */
    _id?: string;
    /**
     * 
     * @type {string}
     * @memberof MessagesRes
     */
    recipient?: string;
    /**
     * 
     * @type {string}
     * @memberof MessagesRes
     */
    sms?: string;
}
/**
 * 
 * @export
 * @interface ObjectId
 */
export interface ObjectId {
    /**
     * 
     * @type {number}
     * @memberof ObjectId
     */
    timestamp?: number;
}
/**
 * 
 * @export
 * @interface OfficersReq
 */
export interface OfficersReq {
    /**
     * 
     * @type {ObjectId}
     * @memberof OfficersReq
     */
    _id?: ObjectId;
    /**
     * 
     * @type {string}
     * @memberof OfficersReq
     */
    contact?: string;
    /**
     * 
     * @type {string}
     * @memberof OfficersReq
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof OfficersReq
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof OfficersReq
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface OfficersRes
 */
export interface OfficersRes {
    /**
     * 
     * @type {string}
     * @memberof OfficersRes
     */
    _id?: string;
    /**
     * 
     * @type {string}
     * @memberof OfficersRes
     */
    contact?: string;
    /**
     * 
     * @type {string}
     * @memberof OfficersRes
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof OfficersRes
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof OfficersRes
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface RecipientsReq
 */
export interface RecipientsReq {
    /**
     * 
     * @type {ObjectId}
     * @memberof RecipientsReq
     */
    _id?: ObjectId;
    /**
     * 
     * @type {string}
     * @memberof RecipientsReq
     */
    contact?: string;
    /**
     * 
     * @type {string}
     * @memberof RecipientsReq
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof RecipientsReq
     */
    institution?: string;
    /**
     * 
     * @type {string}
     * @memberof RecipientsReq
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof RecipientsReq
     */
    status?: string;
}
/**
 * 
 * @export
 * @interface RecipientsRes
 */
export interface RecipientsRes {
    /**
     * 
     * @type {string}
     * @memberof RecipientsRes
     */
    _id?: string;
    /**
     * 
     * @type {string}
     * @memberof RecipientsRes
     */
    contact?: string;
    /**
     * 
     * @type {string}
     * @memberof RecipientsRes
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof RecipientsRes
     */
    institution?: string;
    /**
     * 
     * @type {string}
     * @memberof RecipientsRes
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof RecipientsRes
     */
    status?: string;
}
/**
 * 
 * @export
 * @interface ResponseMessage
 */
export interface ResponseMessage {
    /**
     * 
     * @type {string}
     * @memberof ResponseMessage
     */
    message?: string;
}

/**
 * DocumentControllerApi - axios parameter creator
 * @export
 */
export const DocumentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Insert some documents
         * @param {DocumentsReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDocument: async (model: DocumentsReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('addDocument', 'model', model)
            const localVarPath = `/sms-api/document/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUsingDELETE', 'id', id)
            const localVarPath = `/sms-api/document/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get document by id
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocument: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDocument', 'id', id)
            const localVarPath = `/sms-api/document/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get get all documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocuments: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sms-api/document/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update
         * @param {string} id id
         * @param {DocumentsReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT: async (id: string, model: DocumentsReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUsingPUT', 'id', id)
            // verify required parameter 'model' is not null or undefined
            assertParamExists('updateUsingPUT', 'model', model)
            const localVarPath = `/sms-api/document/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload some documents
         * @param {string} id id
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDocument: async (id: string, file?: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadDocument', 'id', id)
            const localVarPath = `/sms-api/document/upload/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentControllerApi - functional programming interface
 * @export
 */
export const DocumentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Insert some documents
         * @param {DocumentsReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDocument(model: DocumentsReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentsRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDocument(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsingDELETE(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsingDELETE(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get document by id
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocument(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentsRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocument(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get get all documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocuments(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocumentsRes>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocuments(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update
         * @param {string} id id
         * @param {DocumentsReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsingPUT(id: string, model: DocumentsReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentsRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsingPUT(id, model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload some documents
         * @param {string} id id
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadDocument(id: string, file?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadDocument(id, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DocumentControllerApi - factory interface
 * @export
 */
export const DocumentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Insert some documents
         * @param {DocumentsReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDocument(model: DocumentsReq, options?: any): AxiosPromise<DocumentsRes> {
            return localVarFp.addDocument(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUsingDELETE(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get document by id
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocument(id: string, options?: any): AxiosPromise<DocumentsRes> {
            return localVarFp.getDocument(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get get all documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocuments(options?: any): AxiosPromise<Array<DocumentsRes>> {
            return localVarFp.getDocuments(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update
         * @param {string} id id
         * @param {DocumentsReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT(id: string, model: DocumentsReq, options?: any): AxiosPromise<DocumentsRes> {
            return localVarFp.updateUsingPUT(id, model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload some documents
         * @param {string} id id
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDocument(id: string, file?: any, options?: any): AxiosPromise<ResponseMessage> {
            return localVarFp.uploadDocument(id, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentControllerApi - object-oriented interface
 * @export
 * @class DocumentControllerApi
 * @extends {BaseAPI}
 */
export class DocumentControllerApi extends BaseAPI {
    /**
     * 
     * @summary Insert some documents
     * @param {DocumentsReq} model model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public addDocument(model: DocumentsReq, options?: any) {
        return DocumentControllerApiFp(this.configuration).addDocument(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public deleteUsingDELETE(id: string, options?: any) {
        return DocumentControllerApiFp(this.configuration).deleteUsingDELETE(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get document by id
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public getDocument(id: string, options?: any) {
        return DocumentControllerApiFp(this.configuration).getDocument(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get get all documents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public getDocuments(options?: any) {
        return DocumentControllerApiFp(this.configuration).getDocuments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update
     * @param {string} id id
     * @param {DocumentsReq} model model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public updateUsingPUT(id: string, model: DocumentsReq, options?: any) {
        return DocumentControllerApiFp(this.configuration).updateUsingPUT(id, model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload some documents
     * @param {string} id id
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public uploadDocument(id: string, file?: any, options?: any) {
        return DocumentControllerApiFp(this.configuration).uploadDocument(id, file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MessageControllerApi - axios parameter creator
 * @export
 */
export const MessageControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE1: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUsingDELETE1', 'id', id)
            const localVarPath = `/sms-api/message/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetAll
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sms-api/message/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetById
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdUsingGET: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getByIdUsingGET', 'id', id)
            const localVarPath = `/sms-api/message/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Insert
         * @param {MessagesReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertUsingPOST: async (model: MessagesReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('insertUsingPOST', 'model', model)
            const localVarPath = `/sms-api/message/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update
         * @param {string} id id
         * @param {MessagesReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT1: async (id: string, model: MessagesReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUsingPUT1', 'id', id)
            // verify required parameter 'model' is not null or undefined
            assertParamExists('updateUsingPUT1', 'model', model)
            const localVarPath = `/sms-api/message/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageControllerApi - functional programming interface
 * @export
 */
export const MessageControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsingDELETE1(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsingDELETE1(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetAll
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MessagesRes>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetById
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdUsingGET(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdUsingGET(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Insert
         * @param {MessagesReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertUsingPOST(model: MessagesReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertUsingPOST(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update
         * @param {string} id id
         * @param {MessagesReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsingPUT1(id: string, model: MessagesReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsingPUT1(id, model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessageControllerApi - factory interface
 * @export
 */
export const MessageControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE1(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUsingDELETE1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetAll
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET(options?: any): AxiosPromise<Array<MessagesRes>> {
            return localVarFp.getAllUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetById
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdUsingGET(id: string, options?: any): AxiosPromise<MessagesRes> {
            return localVarFp.getByIdUsingGET(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Insert
         * @param {MessagesReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertUsingPOST(model: MessagesReq, options?: any): AxiosPromise<MessagesRes> {
            return localVarFp.insertUsingPOST(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update
         * @param {string} id id
         * @param {MessagesReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT1(id: string, model: MessagesReq, options?: any): AxiosPromise<MessagesRes> {
            return localVarFp.updateUsingPUT1(id, model, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessageControllerApi - object-oriented interface
 * @export
 * @class MessageControllerApi
 * @extends {BaseAPI}
 */
export class MessageControllerApi extends BaseAPI {
    /**
     * 
     * @summary Delete
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public deleteUsingDELETE1(id: string, options?: any) {
        return MessageControllerApiFp(this.configuration).deleteUsingDELETE1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetAll
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public getAllUsingGET(options?: any) {
        return MessageControllerApiFp(this.configuration).getAllUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetById
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public getByIdUsingGET(id: string, options?: any) {
        return MessageControllerApiFp(this.configuration).getByIdUsingGET(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Insert
     * @param {MessagesReq} model model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public insertUsingPOST(model: MessagesReq, options?: any) {
        return MessageControllerApiFp(this.configuration).insertUsingPOST(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update
     * @param {string} id id
     * @param {MessagesReq} model model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public updateUsingPUT1(id: string, model: MessagesReq, options?: any) {
        return MessageControllerApiFp(this.configuration).updateUsingPUT1(id, model, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OfficerControllerApi - axios parameter creator
 * @export
 */
export const OfficerControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE2: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUsingDELETE2', 'id', id)
            const localVarPath = `/officer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetAll
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/officer/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetById
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdUsingGET1: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getByIdUsingGET1', 'id', id)
            const localVarPath = `/officer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Insert
         * @param {OfficersReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertUsingPOST1: async (model: OfficersReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('insertUsingPOST1', 'model', model)
            const localVarPath = `/officer/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update
         * @param {string} id id
         * @param {OfficersReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT2: async (id: string, model: OfficersReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUsingPUT2', 'id', id)
            // verify required parameter 'model' is not null or undefined
            assertParamExists('updateUsingPUT2', 'model', model)
            const localVarPath = `/officer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OfficerControllerApi - functional programming interface
 * @export
 */
export const OfficerControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OfficerControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsingDELETE2(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsingDELETE2(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetAll
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsingGET1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OfficersRes>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsingGET1(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetById
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdUsingGET1(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfficersRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdUsingGET1(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Insert
         * @param {OfficersReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertUsingPOST1(model: OfficersReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfficersRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertUsingPOST1(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update
         * @param {string} id id
         * @param {OfficersReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsingPUT2(id: string, model: OfficersReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfficersRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsingPUT2(id, model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OfficerControllerApi - factory interface
 * @export
 */
export const OfficerControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OfficerControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE2(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUsingDELETE2(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetAll
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET1(options?: any): AxiosPromise<Array<OfficersRes>> {
            return localVarFp.getAllUsingGET1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetById
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdUsingGET1(id: string, options?: any): AxiosPromise<OfficersRes> {
            return localVarFp.getByIdUsingGET1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Insert
         * @param {OfficersReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertUsingPOST1(model: OfficersReq, options?: any): AxiosPromise<OfficersRes> {
            return localVarFp.insertUsingPOST1(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update
         * @param {string} id id
         * @param {OfficersReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT2(id: string, model: OfficersReq, options?: any): AxiosPromise<OfficersRes> {
            return localVarFp.updateUsingPUT2(id, model, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OfficerControllerApi - object-oriented interface
 * @export
 * @class OfficerControllerApi
 * @extends {BaseAPI}
 */
export class OfficerControllerApi extends BaseAPI {
    /**
     * 
     * @summary Delete
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficerControllerApi
     */
    public deleteUsingDELETE2(id: string, options?: any) {
        return OfficerControllerApiFp(this.configuration).deleteUsingDELETE2(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetAll
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficerControllerApi
     */
    public getAllUsingGET1(options?: any) {
        return OfficerControllerApiFp(this.configuration).getAllUsingGET1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetById
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficerControllerApi
     */
    public getByIdUsingGET1(id: string, options?: any) {
        return OfficerControllerApiFp(this.configuration).getByIdUsingGET1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Insert
     * @param {OfficersReq} model model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficerControllerApi
     */
    public insertUsingPOST1(model: OfficersReq, options?: any) {
        return OfficerControllerApiFp(this.configuration).insertUsingPOST1(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update
     * @param {string} id id
     * @param {OfficersReq} model model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficerControllerApi
     */
    public updateUsingPUT2(id: string, model: OfficersReq, options?: any) {
        return OfficerControllerApiFp(this.configuration).updateUsingPUT2(id, model, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RecipientControllerApi - axios parameter creator
 * @export
 */
export const RecipientControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE3: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUsingDELETE3', 'id', id)
            const localVarPath = `/sms-api/recipient/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetAll
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET2: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sms-api/recipient/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetById
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdUsingGET2: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getByIdUsingGET2', 'id', id)
            const localVarPath = `/sms-api/recipient/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Insert
         * @param {RecipientsReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertUsingPOST2: async (model: RecipientsReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('insertUsingPOST2', 'model', model)
            const localVarPath = `/sms-api/recipient/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update
         * @param {string} id id
         * @param {RecipientsReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT3: async (id: string, model: RecipientsReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUsingPUT3', 'id', id)
            // verify required parameter 'model' is not null or undefined
            assertParamExists('updateUsingPUT3', 'model', model)
            const localVarPath = `/sms-api/recipient/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecipientControllerApi - functional programming interface
 * @export
 */
export const RecipientControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecipientControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsingDELETE3(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsingDELETE3(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetAll
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsingGET2(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RecipientsRes>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsingGET2(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetById
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdUsingGET2(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipientsRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdUsingGET2(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Insert
         * @param {RecipientsReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertUsingPOST2(model: RecipientsReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipientsRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertUsingPOST2(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update
         * @param {string} id id
         * @param {RecipientsReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsingPUT3(id: string, model: RecipientsReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipientsRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsingPUT3(id, model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecipientControllerApi - factory interface
 * @export
 */
export const RecipientControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecipientControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE3(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUsingDELETE3(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetAll
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET2(options?: any): AxiosPromise<Array<RecipientsRes>> {
            return localVarFp.getAllUsingGET2(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetById
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdUsingGET2(id: string, options?: any): AxiosPromise<RecipientsRes> {
            return localVarFp.getByIdUsingGET2(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Insert
         * @param {RecipientsReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertUsingPOST2(model: RecipientsReq, options?: any): AxiosPromise<RecipientsRes> {
            return localVarFp.insertUsingPOST2(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update
         * @param {string} id id
         * @param {RecipientsReq} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT3(id: string, model: RecipientsReq, options?: any): AxiosPromise<RecipientsRes> {
            return localVarFp.updateUsingPUT3(id, model, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecipientControllerApi - object-oriented interface
 * @export
 * @class RecipientControllerApi
 * @extends {BaseAPI}
 */
export class RecipientControllerApi extends BaseAPI {
    /**
     * 
     * @summary Delete
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipientControllerApi
     */
    public deleteUsingDELETE3(id: string, options?: any) {
        return RecipientControllerApiFp(this.configuration).deleteUsingDELETE3(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetAll
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipientControllerApi
     */
    public getAllUsingGET2(options?: any) {
        return RecipientControllerApiFp(this.configuration).getAllUsingGET2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetById
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipientControllerApi
     */
    public getByIdUsingGET2(id: string, options?: any) {
        return RecipientControllerApiFp(this.configuration).getByIdUsingGET2(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Insert
     * @param {RecipientsReq} model model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipientControllerApi
     */
    public insertUsingPOST2(model: RecipientsReq, options?: any) {
        return RecipientControllerApiFp(this.configuration).insertUsingPOST2(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update
     * @param {string} id id
     * @param {RecipientsReq} model model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipientControllerApi
     */
    public updateUsingPUT3(id: string, model: RecipientsReq, options?: any) {
        return RecipientControllerApiFp(this.configuration).updateUsingPUT3(id, model, options).then((request) => request(this.axios, this.basePath));
    }
}


